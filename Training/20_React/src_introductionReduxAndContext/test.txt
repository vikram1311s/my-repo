
let store = createStore()

[Redux Wallmart Store]

reducers, action, middleware

<App Store>
    <Three>
        <SubThree>
            <SubFour> 
            </SubFour>
        </Subthree>
    </Three>
</App>



// actions
// reducers


// component level
let getTomots = {
    type: 'GET_TOMOTOS'
}
step1 => dispatch(getTomatos)

// Redux Thunk/Saga Apicall
fetchTomots(){
    fetch.get('url').then(data => {
        update action send reducer {type: 'UPDATE_TOMots", payload: data}
    })
}

//reducer


let initState - {
    tomotos: []
}
function(initState,action){
    if(action.type == 'UPDATE_TOMots'){        
       let newStoreData  = {
        ...initState,
        tomotos: action.payload
       }
       return newStoreData;        
    }

}



<SubThree />
Redux.Connect(Store)





onlci

fetch

<App ContextCounterProvider>
    <Three SubfourLeevelcontex>
        <SubThree>
            <SubFour> 
            </SubFour>
        </Subthree>
    </Three>
</App>